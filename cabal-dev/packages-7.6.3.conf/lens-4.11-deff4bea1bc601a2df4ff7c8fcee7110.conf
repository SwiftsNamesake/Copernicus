name: lens
version: 4.11
id: lens-4.11-deff4bea1bc601a2df4ff7c8fcee7110
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
                 Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
                 Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
                 Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
                 Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
                 System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
                 Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: C:\Users\Jonatan\Desktop\Haskell\projects\Copernicus\cabal-dev//lib\lens-4.11/ghc-7.6.3
library-dirs: C:\Users\Jonatan\Desktop\Haskell\projects\Copernicus\cabal-dev//lib\lens-4.11/ghc-7.6.3
hs-libraries: HSlens-4.11
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.4.0.1-72eb1caf42d7f1e9e960760f41ef98d0
         base-4.6.0.1-f0c2cc6dcf0e12bf75312a2e7f354095
         bifunctors-5-f508343cc4f7cdb60561181f20b16989
         bytestring-0.10.0.2-c8fbf42ac6de7e76dd9245b3f7a2fa84
         comonad-4.2.6-570cd87ceffa2db39d65c9121c55749b
         containers-0.5.0.0-216fcd375644c41421c5f14613e6b5af
         contravariant-1.3.1.1-e19eebd18fffe331876e8faa14fa4027
         distributive-0.4.4-7eeac50d29b893ba0db2dd1977cc1a74
         exceptions-0.8.0.2-bd7cb526387db2473d617e7f5dac4bb8
         filepath-1.3.0.1-e1c074c9a25dc46ffe428d0c99a8124d
         free-4.12.1-abdfaac7e118ec2cebd007da830be5b6
         ghc-prim-0.3.0.0-9d603ae4e062e1401099a3daa8931d0f
         hashable-1.1.2.5-e8326d7b0c6af07b9139e791b5b3ad95
         kan-extensions-4.2.2-77cbe482b0392279503f32c6b5d3ed29
         mtl-2.2.1-8f1ad68889e68bbc1e9dc90e2b29abe6
         parallel-3.2.0.3-e820b19f5a9c77af99f9f74ca067f604
         profunctors-5.1.1-81d0d9749526f0b517fd6970e2ca4742
         reflection-1.5.2.1-9436a593522234fe32c2efacfe6d86c9
         semigroupoids-5.0.0.2-94049da0ecb1ce890c0c6619927d7021
         semigroups-0.16.2.2-c87d0468ca9878c4b01e4dac12b806cb
         tagged-0.8.0.1-dfed1b743c32be9bc4ba49d1cd5f0e35
         template-haskell-2.8.0.0-42f1e6e55511ef4dff7e4249580faf8f
         text-0.11.3.1-a8ece294fe3000125614f30af4cc5e8b
         transformers-0.4.3.0-f9997439b4d9a2b6cc6afba6c305853f
         transformers-compat-0.4.0.4-dcef4e1eeab8de73981ca7a7147f19d8
         unordered-containers-0.2.3.0-07b501cac27baea854ec7338939048bb
         vector-0.10.0.1-de357a28bd1947d0c1ee9b730f605fb0
         void-0.7-a3d3e7c639d93eab519566ebf91e68bd
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: C:\Users\Jonatan\Desktop\Haskell\projects\Copernicus\cabal-dev//doc/lens-4.11\html\lens.haddock
haddock-html: C:\Users\Jonatan\Desktop\Haskell\projects\Copernicus\cabal-dev//doc/lens-4.11\html
